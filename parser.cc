// Generated by Bisonc++ V4.13.01 on Thu, 06 Apr 2017 23:04:11 +0530

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {296, 2}, // 1: program ->  declaration_list procedure_definition_list
     {297, 1}, // 2: declaration_list ->  procedure_declaration_list
     {297, 2}, // 3: declaration_list ->  variable_declaration_list procedure_declaration_list
     {297, 2}, // 4: declaration_list ->  procedure_declaration_list variable_declaration_list
     {299, 1}, // 5: procedure_declaration_list ->  procedure_declaration
     {299, 2}, // 6: procedure_declaration_list ->  procedure_declaration_list procedure_declaration
     {300, 6}, // 7: procedure_declaration (NAME) ->  type NAME '(' argument_list ')' ';'
     {301, 1}, // 8: type (VOID) ->  VOID
     {301, 1}, // 9: type (INTEGER) ->  INTEGER
     {301, 1}, // 10: type (FLOAT) ->  FLOAT
     {302, 0}, // 11: argument_list ->  <empty>
     {302, 3}, // 12: argument_list (',') ->  argument ',' argument_list
     {303, 2}, // 13: argument (INTEGER) ->  INTEGER NAME
     {303, 2}, // 14: argument (FLOAT) ->  FLOAT NAME
     {298, 1}, // 15: procedure_definition_list ->  procedure_definition
     {298, 2}, // 16: procedure_definition_list ->  procedure_definition_list procedure_definition
     {304, 11}, // 17: procedure_definition (NAME) ->  NAME '(' argument_list ')' #0001 '{' optional_variable_declaration_list #0002 statement_list return_stmt '}'
     {305, 0}, // 18: #0001 ->  <empty>
     {306, 0}, // 19: #0002 ->  <empty>
     {308, 0}, // 20: optional_variable_declaration_list ->  <empty>
     {308, 1}, // 21: optional_variable_declaration_list ->  variable_declaration_list
     {309, 1}, // 22: variable_declaration_list ->  variable_declaration
     {309, 2}, // 23: variable_declaration_list ->  variable_declaration_list variable_declaration
     {310, 2}, // 24: variable_declaration (';') ->  declaration ';'
     {311, 2}, // 25: declaration (INTEGER) ->  INTEGER variable_list
     {311, 2}, // 26: declaration (FLOAT) ->  FLOAT variable_list
     {312, 1}, // 27: variable_list (NAME) ->  NAME
     {312, 3}, // 28: variable_list (',') ->  variable_list ',' NAME
     {313, 0}, // 29: statement_list ->  <empty>
     {313, 2}, // 30: statement_list ->  statement_list statement
     {314, 1}, // 31: statement ->  matched_stmt
     {314, 1}, // 32: statement ->  unmatched_stmt
     {315, 1}, // 33: matched_stmt ->  assignment_statement
     {315, 5}, // 34: matched_stmt (WHILE) ->  WHILE '(' boolean_expression ')' matched_stmt
     {315, 1}, // 35: matched_stmt ->  do_while_statement
     {315, 7}, // 36: matched_stmt (IF) ->  IF '(' boolean_expression ')' matched_stmt ELSE matched_stmt
     {315, 3}, // 37: matched_stmt ('{') ->  '{' statement_list '}'
     {316, 5}, // 38: unmatched_stmt (IF) ->  IF '(' boolean_expression ')' statement
     {316, 7}, // 39: unmatched_stmt (IF) ->  IF '(' boolean_expression ')' matched_stmt ELSE unmatched_stmt
     {316, 5}, // 40: unmatched_stmt (WHILE) ->  WHILE '(' boolean_expression ')' unmatched_stmt
     {317, 7}, // 41: do_while_statement (DO) ->  DO statement WHILE '(' boolean_expression ')' ';'
     {318, 4}, // 42: assignment_statement (ASSIGN) ->  variable ASSIGN arith_expression ';'
     {319, 5}, // 43: print_statement ('(') ->  PRINT '(' arith_expression ')' ';'
     {319, 5}, // 44: print_statement ('(') ->  PRINT '(' STRING ')' ';'
     {307, 2}, // 45: return_stmt (RETURN) ->  RETURN ';'
     {307, 3}, // 46: return_stmt (RETURN) ->  RETURN arith_expression ';'
     {322, 5}, // 47: function_call (NAME) ->  NAME '(' parameter_list ')' ';'
     {323, 0}, // 48: parameter_list ->  <empty>
     {323, 3}, // 49: parameter_list (',') ->  parameter_list ',' parameter
     {324, 1}, // 50: parameter ->  arith_expression
     {325, 3}, // 51: arith_expression ('+') ->  arith_expression '+' arith_expression
     {325, 3}, // 52: arith_expression ('-') ->  arith_expression '-' arith_expression
     {325, 3}, // 53: arith_expression ('*') ->  arith_expression '*' arith_expression
     {325, 3}, // 54: arith_expression ('/') ->  arith_expression '/' arith_expression
     {325, 2}, // 55: arith_expression (UMINUS) ->  '-' arith_expression
     {325, 3}, // 56: arith_expression ('(') ->  '(' arith_expression ')'
     {325, 1}, // 57: arith_expression ->  expression_term
     {325, 5}, // 58: arith_expression ('?') ->  boolean_expression '?' arith_expression ':' arith_expression
     {325, 1}, // 59: arith_expression ->  function_call
     {326, 1}, // 60: expression_term ->  variable
     {326, 1}, // 61: expression_term ->  constant
     {327, 3}, // 62: boolean_expression (AND) ->  boolean_expression AND boolean_expression
     {327, 3}, // 63: boolean_expression (OR) ->  boolean_expression OR boolean_expression
     {327, 2}, // 64: boolean_expression (NOT) ->  NOT boolean_expression
     {327, 3}, // 65: boolean_expression ('(') ->  '(' boolean_expression ')'
     {327, 1}, // 66: boolean_expression ->  relational_expression
     {328, 3}, // 67: relational_expression (LESS_THAN) ->  arith_expression LESS_THAN arith_expression
     {328, 3}, // 68: relational_expression (LESS_THAN_EQUAL) ->  arith_expression LESS_THAN_EQUAL arith_expression
     {328, 3}, // 69: relational_expression (GREATER_THAN) ->  arith_expression GREATER_THAN arith_expression
     {328, 3}, // 70: relational_expression (GREATER_THAN_EQUAL) ->  arith_expression GREATER_THAN_EQUAL arith_expression
     {328, 3}, // 71: relational_expression (EQUAL_TO) ->  arith_expression EQUAL_TO arith_expression
     {328, 3}, // 72: relational_expression (NOT_EQUAL_TO) ->  arith_expression NOT_EQUAL_TO arith_expression
     {329, 1}, // 73: variable (NAME) ->  NAME
     {330, 1}, // 74: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
     {330, 1}, // 75: constant (DOUBLE_NUMBER) ->  DOUBLE_NUMBER
     {331, 1}, // 76: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 12} },                              
    { {       296}, {  1} }, // program                   
    { {       297}, {  2} }, // declaration_list          
    { {       299}, {  3} }, // procedure_declaration_list
    { {       309}, {  4} }, // variable_declaration_list 
    { {       300}, {  5} }, // procedure_declaration     
    { {       310}, {  6} }, // variable_declaration      
    { {       301}, {  7} }, // type                      
    { {       311}, {  8} }, // declaration               
    { {       270}, {  9} }, // VOID                      
    { {       271}, { 10} }, // INTEGER                   
    { {       272}, { 11} }, // FLOAT                     
    { {         0}, {  0} },                              
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, {  4} },                             
    { {       298}, { 12} }, // procedure_definition_list
    { {       304}, { 13} }, // procedure_definition     
    { {       269}, { 14} }, // NAME                     
    { {         0}, {  0} },                             
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  9} },                             
    { {     309}, { 15} }, // variable_declaration_list
    { {     300}, { 16} }, // procedure_declaration    
    { {     310}, {  6} }, // variable_declaration     
    { {     301}, {  7} }, // type                     
    { {     311}, {  8} }, // declaration              
    { {     270}, {  9} }, // VOID                     
    { {     271}, { 10} }, // INTEGER                  
    { {     272}, { 11} }, // FLOAT                    
    { {       0}, { -2} },                             
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, {  9} },                              
    { {       299}, { 17} }, // procedure_declaration_list
    { {       310}, { 18} }, // variable_declaration      
    { {       300}, {  5} }, // procedure_declaration     
    { {       311}, {  8} }, // declaration               
    { {       301}, {  7} }, // type                      
    { {       271}, { 10} }, // INTEGER                   
    { {       272}, { 11} }, // FLOAT                     
    { {       270}, {  9} }, // VOID                      
    { {         0}, {  0} },                              
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       269}, { 19} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 20} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_10[] =
{
    { { REQ_DEF}, {  3} },                 
    { {     312}, { 21} }, // variable_list
    { {     269}, { 22} }, // NAME         
    { {       0}, { -9} },                 
};

SR__ s_11[] =
{
    { { REQ_DEF}, {   3} },                 
    { {     312}, {  23} }, // variable_list
    { {     269}, {  22} }, // NAME         
    { {       0}, { -10} },                 
};

SR__ s_12[] =
{
    { { REQ_DEF}, {  3} },                        
    { {     304}, { 24} }, // procedure_definition
    { {     269}, { 14} }, // NAME                
    { {       0}, { -1} },                        
};

SR__ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 25} }, // '('
    { {         0}, {  0} },       
};

SR__ s_15[] =
{
    { { REQ_DEF}, {  5} },                        
    { {     310}, { 18} }, // variable_declaration
    { {     311}, {  8} }, // declaration         
    { {     271}, { 26} }, // INTEGER             
    { {     272}, { 27} }, // FLOAT               
    { {       0}, { -4} },                        
};

SR__ s_16[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_17[] =
{
    { { REQ_DEF}, {  6} },                         
    { {     300}, { 16} }, // procedure_declaration
    { {     301}, {  7} }, // type                 
    { {     270}, {  9} }, // VOID                 
    { {     271}, { 28} }, // INTEGER              
    { {     272}, { 29} }, // FLOAT                
    { {       0}, { -3} },                         
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_21[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, {  31} }, // ','
    { {       0}, { -25} },       
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_23[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, {  31} }, // ','
    { {       0}, { -26} },       
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_25[] =
{
    { { REQ_DEF}, {   5} },                 
    { {     302}, {  32} }, // argument_list
    { {     303}, {  33} }, // argument     
    { {     271}, {  34} }, // INTEGER      
    { {     272}, {  35} }, // FLOAT        
    { {       0}, { -11} },                 
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, {  3} },                 
    { {       312}, { 21} }, // variable_list
    { {       269}, { 22} }, // NAME         
    { {         0}, {  0} },                 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  3} },                 
    { {       312}, { 23} }, // variable_list
    { {       269}, { 22} }, // NAME         
    { {         0}, {  0} },                 
};

SR__ s_28[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_30[] =
{
    { { REQ_DEF}, {   5} },                 
    { {     302}, {  36} }, // argument_list
    { {     303}, {  33} }, // argument     
    { {     271}, {  34} }, // INTEGER      
    { {     272}, {  35} }, // FLOAT        
    { {       0}, { -11} },                 
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       269}, { 37} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 38} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        44}, { 39} }, // ','
    { {         0}, {  0} },       
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       269}, { 40} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       269}, { 41} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 42} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   2} },         
    { {     305}, {  43} }, // #0001
    { {       0}, { -18} },         
};

SR__ s_39[] =
{
    { { REQ_DEF}, {   5} },                 
    { {     302}, {  44} }, // argument_list
    { {     303}, {  33} }, // argument     
    { {     271}, {  34} }, // INTEGER      
    { {     272}, {  35} }, // FLOAT        
    { {       0}, { -11} },                 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 45} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 46} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_46[] =
{
    { { REQ_DEF}, {   7} },                                      
    { {     308}, {  47} }, // optional_variable_declaration_list
    { {     309}, {  48} }, // variable_declaration_list         
    { {     310}, {   6} }, // variable_declaration              
    { {     311}, {   8} }, // declaration                       
    { {     271}, {  26} }, // INTEGER                           
    { {     272}, {  27} }, // FLOAT                             
    { {       0}, { -20} },                                      
};

SR__ s_47[] =
{
    { { DEF_RED}, {   2} },         
    { {     306}, {  49} }, // #0002
    { {       0}, { -19} },         
};

SR__ s_48[] =
{
    { { REQ_DEF}, {   5} },                        
    { {     310}, {  18} }, // variable_declaration
    { {     311}, {   8} }, // declaration         
    { {     271}, {  26} }, // INTEGER             
    { {     272}, {  27} }, // FLOAT               
    { {       0}, { -21} },                        
};

SR__ s_49[] =
{
    { { DEF_RED}, {   2} },                  
    { {     313}, {  50} }, // statement_list
    { {       0}, { -29} },                  
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, { 14} },                        
    { {       307}, { 51} }, // return_stmt         
    { {       314}, { 52} }, // statement           
    { {       278}, { 53} }, // RETURN              
    { {       315}, { 54} }, // matched_stmt        
    { {       316}, { 55} }, // unmatched_stmt      
    { {       318}, { 56} }, // assignment_statement
    { {       274}, { 57} }, // WHILE               
    { {       317}, { 58} }, // do_while_statement  
    { {       275}, { 59} }, // IF                  
    { {       123}, { 60} }, // '{'                 
    { {       329}, { 61} }, // variable            
    { {       273}, { 62} }, // DO                  
    { {       269}, { 63} }, // NAME                
    { {         0}, {  0} },                        
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       125}, { 64} }, // '}'
    { {         0}, {  0} },       
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, { 15} },                         
    { {        59}, { 65} }, // ';'                  
    { {       325}, { 66} }, // arith_expression     
    { {        45}, { 67} }, // '-'                  
    { {        40}, { 68} }, // '('                  
    { {       326}, { 69} }, // expression_term      
    { {       327}, { 70} }, // boolean_expression   
    { {       322}, { 71} }, // function_call        
    { {       329}, { 72} }, // variable             
    { {       330}, { 73} }, // constant             
    { {       266}, { 74} }, // NOT                  
    { {       328}, { 75} }, // relational_expression
    { {       269}, { 76} }, // NAME                 
    { {       267}, { 77} }, // INTEGER_NUMBER       
    { {       268}, { 78} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 79} }, // '('
    { {         0}, {  0} },       
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 80} }, // '('
    { {         0}, {  0} },       
};

SR__ s_60[] =
{
    { { DEF_RED}, {   2} },                  
    { {     313}, {  81} }, // statement_list
    { {       0}, { -29} },                  
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       277}, { 82} }, // ASSIGN
    { {         0}, {  0} },          
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, { 12} },                        
    { {       314}, { 83} }, // statement           
    { {       315}, { 54} }, // matched_stmt        
    { {       316}, { 55} }, // unmatched_stmt      
    { {       318}, { 56} }, // assignment_statement
    { {       274}, { 57} }, // WHILE               
    { {       317}, { 58} }, // do_while_statement  
    { {       275}, { 59} }, // IF                  
    { {       123}, { 60} }, // '{'                 
    { {       329}, { 61} }, // variable            
    { {       273}, { 62} }, // DO                  
    { {       269}, { 63} }, // NAME                
    { {         0}, {  0} },                        
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, { 12} },                      
    { {        59}, { 84} }, // ';'               
    { {        43}, { 85} }, // '+'               
    { {        45}, { 86} }, // '-'               
    { {        42}, { 87} }, // '*'               
    { {        47}, { 88} }, // '/'               
    { {       261}, { 89} }, // LESS_THAN         
    { {       262}, { 90} }, // LESS_THAN_EQUAL   
    { {       263}, { 91} }, // GREATER_THAN      
    { {       264}, { 92} }, // GREATER_THAN_EQUAL
    { {       259}, { 93} }, // EQUAL_TO          
    { {       260}, { 94} }, // NOT_EQUAL_TO      
    { {         0}, {  0} },                      
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       325}, { 95} }, // arith_expression     
    { {        45}, { 67} }, // '-'                  
    { {        40}, { 68} }, // '('                  
    { {       326}, { 69} }, // expression_term      
    { {       327}, { 70} }, // boolean_expression   
    { {       322}, { 71} }, // function_call        
    { {       329}, { 72} }, // variable             
    { {       330}, { 73} }, // constant             
    { {       266}, { 74} }, // NOT                  
    { {       328}, { 75} }, // relational_expression
    { {       269}, { 76} }, // NAME                 
    { {       267}, { 77} }, // INTEGER_NUMBER       
    { {       268}, { 78} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, { 14} },                         
    { {       325}, { 96} }, // arith_expression     
    { {       327}, { 97} }, // boolean_expression   
    { {        45}, { 67} }, // '-'                  
    { {        40}, { 68} }, // '('                  
    { {       326}, { 69} }, // expression_term      
    { {       322}, { 71} }, // function_call        
    { {       266}, { 74} }, // NOT                  
    { {       328}, { 75} }, // relational_expression
    { {       329}, { 72} }, // variable             
    { {       330}, { 73} }, // constant             
    { {       269}, { 76} }, // NAME                 
    { {       267}, { 77} }, // INTEGER_NUMBER       
    { {       268}, { 78} }, // DOUBLE_NUMBER        
    { {         0}, {  0} },                         
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {   4} },       
    { {        63}, {  98} }, // '?'
    { {       258}, {  99} }, // AND
    { {       257}, { 100} }, // OR 
    { {         0}, {   0} },       
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       327}, { 101} }, // boolean_expression   
    { {       266}, {  74} }, // NOT                  
    { {        40}, {  68} }, // '('                  
    { {       328}, {  75} }, // relational_expression
    { {       325}, { 102} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {       326}, {  69} }, // expression_term      
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_76[] =
{
    { { REQ_DEF}, {   2} },       
    { {      40}, { 103} }, // '('
    { {       0}, { -73} },       
};

SR__ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       327}, { 104} }, // boolean_expression   
    { {       266}, {  74} }, // NOT                  
    { {        40}, {  68} }, // '('                  
    { {       328}, {  75} }, // relational_expression
    { {       325}, { 102} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {       326}, {  69} }, // expression_term      
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       327}, { 105} }, // boolean_expression   
    { {       266}, {  74} }, // NOT                  
    { {        40}, {  68} }, // '('                  
    { {       328}, {  75} }, // relational_expression
    { {       325}, { 102} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {       326}, {  69} }, // expression_term      
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  13} },                        
    { {       125}, { 106} }, // '}'                 
    { {       314}, {  52} }, // statement           
    { {       315}, {  54} }, // matched_stmt        
    { {       316}, {  55} }, // unmatched_stmt      
    { {       318}, {  56} }, // assignment_statement
    { {       274}, {  57} }, // WHILE               
    { {       317}, {  58} }, // do_while_statement  
    { {       275}, {  59} }, // IF                  
    { {       123}, {  60} }, // '{'                 
    { {       329}, {  61} }, // variable            
    { {       273}, {  62} }, // DO                  
    { {       269}, {  63} }, // NAME                
    { {         0}, {   0} },                        
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 107} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       274}, { 108} }, // WHILE
    { {         0}, {   0} },         
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 109} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 110} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 111} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 112} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 113} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 114} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 115} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 116} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 117} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 118} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_95[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  12} },                      
    { {        41}, { 119} }, // ')'               
    { {        43}, {  85} }, // '+'               
    { {        45}, {  86} }, // '-'               
    { {        42}, {  87} }, // '*'               
    { {        47}, {  88} }, // '/'               
    { {       261}, {  89} }, // LESS_THAN         
    { {       262}, {  90} }, // LESS_THAN_EQUAL   
    { {       263}, {  91} }, // GREATER_THAN      
    { {       264}, {  92} }, // GREATER_THAN_EQUAL
    { {       259}, {  93} }, // EQUAL_TO          
    { {       260}, {  94} }, // NOT_EQUAL_TO      
    { {         0}, {   0} },                      
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 120} }, // ')'
    { {        63}, {  98} }, // '?'
    { {       258}, {  99} }, // AND
    { {       257}, { 100} }, // OR 
    { {         0}, {   0} },       
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 121} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       327}, { 122} }, // boolean_expression   
    { {       266}, {  74} }, // NOT                  
    { {        40}, {  68} }, // '('                  
    { {       328}, {  75} }, // relational_expression
    { {       325}, { 102} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {       326}, {  69} }, // expression_term      
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       327}, { 123} }, // boolean_expression   
    { {       266}, {  74} }, // NOT                  
    { {        40}, {  68} }, // '('                  
    { {       328}, {  75} }, // relational_expression
    { {       325}, { 102} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {       326}, {  69} }, // expression_term      
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_101[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, { 11} },                      
    { {       261}, { 89} }, // LESS_THAN         
    { {       262}, { 90} }, // LESS_THAN_EQUAL   
    { {       263}, { 91} }, // GREATER_THAN      
    { {       264}, { 92} }, // GREATER_THAN_EQUAL
    { {       259}, { 93} }, // EQUAL_TO          
    { {       260}, { 94} }, // NOT_EQUAL_TO      
    { {        43}, { 85} }, // '+'               
    { {        45}, { 86} }, // '-'               
    { {        42}, { 87} }, // '*'               
    { {        47}, { 88} }, // '/'               
    { {         0}, {  0} },                      
};

SR__ s_103[] =
{
    { { DEF_RED}, {   2} },                  
    { {     323}, { 124} }, // parameter_list
    { {       0}, { -48} },                  
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 125} }, // ')'
    { {       258}, {  99} }, // AND
    { {       257}, { 100} }, // OR 
    { {        63}, {  98} }, // '?'
    { {         0}, {   0} },       
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 126} }, // ')'
    { {       258}, {  99} }, // AND
    { {       257}, { 100} }, // OR 
    { {        63}, {  98} }, // '?'
    { {         0}, {   0} },       
};

SR__ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {  12} },                      
    { {        59}, { 127} }, // ';'               
    { {        43}, {  85} }, // '+'               
    { {        45}, {  86} }, // '-'               
    { {        42}, {  87} }, // '*'               
    { {        47}, {  88} }, // '/'               
    { {       261}, {  89} }, // LESS_THAN         
    { {       262}, {  90} }, // LESS_THAN_EQUAL   
    { {       263}, {  91} }, // GREATER_THAN      
    { {       264}, {  92} }, // GREATER_THAN_EQUAL
    { {       259}, {  93} }, // EQUAL_TO          
    { {       260}, {  94} }, // NOT_EQUAL_TO      
    { {         0}, {   0} },                      
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 128} }, // '('
    { {         0}, {   0} },       
};

SR__ s_109[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  87} }, // '*'
    { {      47}, {  88} }, // '/'
    { {       0}, { -51} },       
};

SR__ s_110[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  87} }, // '*'
    { {      47}, {  88} }, // '/'
    { {       0}, { -52} },       
};

SR__ s_111[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_112[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_113[] =
{
    { { REQ_DEF}, {  11} },                      
    { {      43}, {  85} }, // '+'               
    { {      45}, {  86} }, // '-'               
    { {      42}, {  87} }, // '*'               
    { {      47}, {  88} }, // '/'               
    { {     261}, {  89} }, // LESS_THAN         
    { {     262}, {  90} }, // LESS_THAN_EQUAL   
    { {     263}, {  91} }, // GREATER_THAN      
    { {     264}, {  92} }, // GREATER_THAN_EQUAL
    { {     259}, {  93} }, // EQUAL_TO          
    { {     260}, {  94} }, // NOT_EQUAL_TO      
    { {       0}, { -67} },                      
};

SR__ s_114[] =
{
    { { REQ_DEF}, {  11} },                      
    { {      43}, {  85} }, // '+'               
    { {      45}, {  86} }, // '-'               
    { {      42}, {  87} }, // '*'               
    { {      47}, {  88} }, // '/'               
    { {     261}, {  89} }, // LESS_THAN         
    { {     262}, {  90} }, // LESS_THAN_EQUAL   
    { {     263}, {  91} }, // GREATER_THAN      
    { {     264}, {  92} }, // GREATER_THAN_EQUAL
    { {     259}, {  93} }, // EQUAL_TO          
    { {     260}, {  94} }, // NOT_EQUAL_TO      
    { {       0}, { -68} },                      
};

SR__ s_115[] =
{
    { { REQ_DEF}, {  11} },                      
    { {      43}, {  85} }, // '+'               
    { {      45}, {  86} }, // '-'               
    { {      42}, {  87} }, // '*'               
    { {      47}, {  88} }, // '/'               
    { {     261}, {  89} }, // LESS_THAN         
    { {     262}, {  90} }, // LESS_THAN_EQUAL   
    { {     263}, {  91} }, // GREATER_THAN      
    { {     264}, {  92} }, // GREATER_THAN_EQUAL
    { {     259}, {  93} }, // EQUAL_TO          
    { {     260}, {  94} }, // NOT_EQUAL_TO      
    { {       0}, { -69} },                      
};

SR__ s_116[] =
{
    { { REQ_DEF}, {  11} },                      
    { {      43}, {  85} }, // '+'               
    { {      45}, {  86} }, // '-'               
    { {      42}, {  87} }, // '*'               
    { {      47}, {  88} }, // '/'               
    { {     261}, {  89} }, // LESS_THAN         
    { {     262}, {  90} }, // LESS_THAN_EQUAL   
    { {     263}, {  91} }, // GREATER_THAN      
    { {     264}, {  92} }, // GREATER_THAN_EQUAL
    { {     259}, {  93} }, // EQUAL_TO          
    { {     260}, {  94} }, // NOT_EQUAL_TO      
    { {       0}, { -70} },                      
};

SR__ s_117[] =
{
    { { REQ_DEF}, {  11} },                      
    { {      43}, {  85} }, // '+'               
    { {      45}, {  86} }, // '-'               
    { {      42}, {  87} }, // '*'               
    { {      47}, {  88} }, // '/'               
    { {     261}, {  89} }, // LESS_THAN         
    { {     262}, {  90} }, // LESS_THAN_EQUAL   
    { {     263}, {  91} }, // GREATER_THAN      
    { {     264}, {  92} }, // GREATER_THAN_EQUAL
    { {     259}, {  93} }, // EQUAL_TO          
    { {     260}, {  94} }, // NOT_EQUAL_TO      
    { {       0}, { -71} },                      
};

SR__ s_118[] =
{
    { { REQ_DEF}, {  11} },                      
    { {      43}, {  85} }, // '+'               
    { {      45}, {  86} }, // '-'               
    { {      42}, {  87} }, // '*'               
    { {      47}, {  88} }, // '/'               
    { {     261}, {  89} }, // LESS_THAN         
    { {     262}, {  90} }, // LESS_THAN_EQUAL   
    { {     263}, {  91} }, // GREATER_THAN      
    { {     264}, {  92} }, // GREATER_THAN_EQUAL
    { {     259}, {  93} }, // EQUAL_TO          
    { {     260}, {  94} }, // NOT_EQUAL_TO      
    { {       0}, { -72} },                      
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {  12} },                      
    { {        58}, { 129} }, // ':'               
    { {        43}, {  85} }, // '+'               
    { {        45}, {  86} }, // '-'               
    { {        42}, {  87} }, // '*'               
    { {        47}, {  88} }, // '/'               
    { {       261}, {  89} }, // LESS_THAN         
    { {       262}, {  90} }, // LESS_THAN_EQUAL   
    { {       263}, {  91} }, // GREATER_THAN      
    { {       264}, {  92} }, // GREATER_THAN_EQUAL
    { {       259}, {  93} }, // EQUAL_TO          
    { {       260}, {  94} }, // NOT_EQUAL_TO      
    { {         0}, {   0} },                      
};

SR__ s_122[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_123[] =
{
    { { REQ_DEF}, {   2} },       
    { {     258}, {  99} }, // AND
    { {       0}, { -63} },       
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 130} }, // ')'
    { {        44}, { 131} }, // ','
    { {         0}, {   0} },       
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {  11} },                        
    { {       315}, { 132} }, // matched_stmt        
    { {       316}, { 133} }, // unmatched_stmt      
    { {       318}, {  56} }, // assignment_statement
    { {       274}, {  57} }, // WHILE               
    { {       317}, {  58} }, // do_while_statement  
    { {       275}, {  59} }, // IF                  
    { {       123}, {  60} }, // '{'                 
    { {       329}, {  61} }, // variable            
    { {       273}, {  62} }, // DO                  
    { {       269}, {  63} }, // NAME                
    { {         0}, {   0} },                        
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {  12} },                        
    { {       315}, { 134} }, // matched_stmt        
    { {       314}, { 135} }, // statement           
    { {       318}, {  56} }, // assignment_statement
    { {       274}, {  57} }, // WHILE               
    { {       317}, {  58} }, // do_while_statement  
    { {       275}, {  59} }, // IF                  
    { {       123}, {  60} }, // '{'                 
    { {       316}, {  55} }, // unmatched_stmt      
    { {       329}, {  61} }, // variable            
    { {       273}, {  62} }, // DO                  
    { {       269}, {  63} }, // NAME                
    { {         0}, {   0} },                        
};

SR__ s_127[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       327}, { 136} }, // boolean_expression   
    { {       266}, {  74} }, // NOT                  
    { {        40}, {  68} }, // '('                  
    { {       328}, {  75} }, // relational_expression
    { {       325}, { 102} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {       326}, {  69} }, // expression_term      
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_129[] =
{
    { { REQ_TOKEN}, {  14} },                         
    { {       325}, { 137} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 138} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {  15} },                         
    { {       324}, { 139} }, // parameter            
    { {       325}, { 140} }, // arith_expression     
    { {        45}, {  67} }, // '-'                  
    { {        40}, {  68} }, // '('                  
    { {       326}, {  69} }, // expression_term      
    { {       327}, {  70} }, // boolean_expression   
    { {       322}, {  71} }, // function_call        
    { {       329}, {  72} }, // variable             
    { {       330}, {  73} }, // constant             
    { {       266}, {  74} }, // NOT                  
    { {       328}, {  75} }, // relational_expression
    { {       269}, {  76} }, // NAME                 
    { {       267}, {  77} }, // INTEGER_NUMBER       
    { {       268}, {  78} }, // DOUBLE_NUMBER        
    { {         0}, {   0} },                         
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_133[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_134[] =
{
    { { REQ_DEF}, {   2} },        
    { {     276}, { 141} }, // ELSE
    { {       0}, { -31} },        
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 142} }, // ')'
    { {       258}, {  99} }, // AND
    { {       257}, { 100} }, // OR 
    { {        63}, {  98} }, // '?'
    { {         0}, {   0} },       
};

SR__ s_137[] =
{
    { { REQ_DEF}, {  11} },                      
    { {      43}, {  85} }, // '+'               
    { {      45}, {  86} }, // '-'               
    { {      42}, {  87} }, // '*'               
    { {      47}, {  88} }, // '/'               
    { {     261}, {  89} }, // LESS_THAN         
    { {     262}, {  90} }, // LESS_THAN_EQUAL   
    { {     263}, {  91} }, // GREATER_THAN      
    { {     264}, {  92} }, // GREATER_THAN_EQUAL
    { {     259}, {  93} }, // EQUAL_TO          
    { {     260}, {  94} }, // NOT_EQUAL_TO      
    { {       0}, { -58} },                      
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_140[] =
{
    { { REQ_DEF}, {  11} },                      
    { {      43}, {  85} }, // '+'               
    { {      45}, {  86} }, // '-'               
    { {      42}, {  87} }, // '*'               
    { {      47}, {  88} }, // '/'               
    { {     261}, {  89} }, // LESS_THAN         
    { {     262}, {  90} }, // LESS_THAN_EQUAL   
    { {     263}, {  91} }, // GREATER_THAN      
    { {     264}, {  92} }, // GREATER_THAN_EQUAL
    { {     259}, {  93} }, // EQUAL_TO          
    { {     260}, {  94} }, // NOT_EQUAL_TO      
    { {       0}, { -50} },                      
};

SR__ s_141[] =
{
    { { REQ_TOKEN}, {  11} },                        
    { {       315}, { 143} }, // matched_stmt        
    { {       316}, { 144} }, // unmatched_stmt      
    { {       318}, {  56} }, // assignment_statement
    { {       274}, {  57} }, // WHILE               
    { {       317}, {  58} }, // do_while_statement  
    { {       275}, {  59} }, // IF                  
    { {       123}, {  60} }, // '{'                 
    { {       329}, {  61} }, // variable            
    { {       273}, {  62} }, // DO                  
    { {       269}, {  63} }, // NAME                
    { {         0}, {   0} },                        
};

SR__ s_142[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 145} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_144[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_145[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

// $insert defaultactionreturn
                            // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 64 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         program_object.set_procedure(current_procedure, get_line_number());
         program_object.global_list_in_proc_check();
         }
         }
        break;

        case 2:
#line 77 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table * global_table = new Symbol_Table();
         program_object.set_global_table(*global_table);
         }
         }
        break;

        case 3:
#line 87 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table * global_table = d_vsp__[-1].symbol_table;
         CHECK_INVARIANT((global_table != NULL), "Global declarations cannot be null");
         program_object.set_global_table(*global_table);
         }
         }
        break;

        case 4:
#line 100 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table * global_table = d_vsp__[0].symbol_table;
         CHECK_INVARIANT((global_table != NULL), "Global declarations cannot be null");
         program_object.set_global_table(*global_table);
         }
         }
        break;

        case 5:
#line 114 "parser.yy"
        {
         }
        break;

        case 6:
#line 119 "parser.yy"
        {
         }
        break;

        case 7:
#line 126 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-4].string_value != NULL), "Procedure name cannot be null");
         string proc_name = *d_vsp__[-4].string_value;
         CHECK_INVARIANT(!program_object.variable_proc_name_check(proc_name),
         "Overloading of the procedure is not allowed");
         string type = *d_vsp__[-5];
         CHECK_INVARIANT(type = "void" || type = "int" || type = "float", "Unknown type in procedure_declaration");
         Data_Type dt;
         string t = d_vsp__[-5];
         if (t == "void")
         dt = void_data_type;
         else if (t == "int")
         dt = int_data_type;
         else
         dt = double_data_type;
         Procedure * proc = new Procedure(dt, proc_name, get_line_number());
         program_object.add_procedure(proc, get_line_number());
         list<pair<Data_Type, string> > arg_list = *d_vsp__[-2];
         if(arg_list.size() >= 2)
         {
         for(list<pair<Data_Type, string> >::iterator it = arg_list.begin(); it != arg_list.end(); it++)
         {
         for(list<pair<Data_Type, string> >::iterator it1 = ++it, it--; it1 != arg_list.end(); it1++)
         {
         CHECK_INVARIANT(it1->second != it->second, "Identical names of formal parameters");
         }
         }
         }
         pair<Data_Type, string> p = new pair<Data_Type, string>(dt, t);
         CHECK_INVARIANT(arg_list.find(p) == arg_list.end(), "Function name used in formal parameter list");
         proc->set_argument_list(arg_list);
         Symbol_Table * loc_tab = new Symbol_Table();
         for (list<pair<Data_Type, string> >::iterator it = arg_list.begin(); it != arg_list.end(); it ++)
         {
         Symbol_Table_Entry * sym_tab_entry = new Symbol_Table_Entry(it->second, it->first, get_line_number());
         loc_tab->push_symbol(sym_tab_entry);
         }
         proc->set_local_list(arg_list);
         d_val__ = proc;
         }
         }
        break;

        case 8:
#line 181 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         d_val__ = "void";
         }
         }
        break;

        case 9:
#line 189 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         d_val__ = "int";
         }
         }
        break;

        case 10:
#line 197 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         d_val__ = "float";
         }
         }
        break;

        case 11:
#line 207 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         list<pair<Data_Type, string> > * arg_list = new list<pair<Data_Type, string> >();
         d_val__ = arg_list;
         }
         }
        break;

        case 12:
#line 216 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         list<pair<Data_Type, string> > * arg_list = d_vsp__[0];
         arg_list->push_back(*d_vsp__[-2]);
         d_val__ = arg_list;
         }
         }
        break;

        case 13:
#line 228 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Data_Type dt = int_data_type;
         string name = *d_vsp__[0].string_value;
         pair<Data_Type, string> * p = new pair<Data_Type, string>(dt, name);
         d_val__ = p;
         }
         }
        break;

        case 14:
#line 239 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Data_Type dt = double_data_type;
         string name = *d_vsp__[0].string_value;
         pair<Data_Type, string> * p = new pair<Data_Type, string>(dt, name);
         d_val__ = p;
         }
         }
        break;

        case 15:
#line 252 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(d_vsp__[0] != NULL, "procedure_definition can not be null");
         }
         }
        break;

        case 16:
#line 260 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(d_vsp__[0] != NULL, "procedure_definition can not be null");
         }
         }
        break;

        case 17:
#line 298 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Sequence_Ast* seq = d_vsp__[-3];
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         CHECK_INVARIANT((seq != NULL), "statement list cannot be null");
         current_procedure->set_sequence_ast(*seq);
         }
         }
        break;

        case 18:
#line 270 "parser.yy"
        d_val__ = d_vsp__[-3];
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-3].string_value != NULL), "Procedure name cannot be null");
         string proc_name = *d_vsp__[-3].string_value;
         CHECK_INVARIANT(program_object.variable_proc_name_check(proc_name), 
         "Procedure corresponding to the name is not found");
         CHECK_INPUT ((program_object.variable_in_symbol_list_check(proc_name) == false),
         "Procedure name cannot be same as global variable", get_line_number());
         current_procedure = get_procedure(proc_name);
         list<pair<Data_Type, string> > * arg_list = d_vsp__[-1];
         CHECK_INVARIANT(current_procedure.same_arguments(*arg_list), 
         "Formal Parameters of procedure definition and declaration do not match");
         }
         }
        break;

        case 19:
#line 290 "parser.yy"
        d_val__ = d_vsp__[-6];
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         }
         }
        break;

        case 20:
#line 312 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         d_val__.symbol_table = NULL;
         }
         }
        break;

        case 21:
#line 320 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].symbol_table != NULL), "Declaration statement list cannot be null here");
         d_val__.symbol_table = d_vsp__[0].symbol_table;
         }
         }
        break;

        case 22:
#line 332 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         Symbol_Table * decl_list = new Symbol_Table();
         CHECK_INVARIANT((d_vsp__[0].decl_entry_list != NULL), "The declaration statement cannot be null");
         vector<Symbol_Table_Entry * > *decl_entry_list = d_vsp__[0].decl_entry_list;
         for(vector<Symbol_Table_Entry * >::iterator it = decl_entry_list->begin(); it != decl_entry_list->end(); ++it)
         {
         string decl_name = (*it) -> get_variable_name();
         CHECK_INPUT((program_object.variable_proc_name_check(decl_name) == false),
         "Procedure name cannot be same as the variable name", get_line_number());
         if(current_procedure != NULL)
         {
         CHECK_INPUT((current_procedure->get_proc_name() != decl_name),
         "Variable name cannot be same as procedure name", get_line_number());
         CHECK_INVARIANT(current_procedure->variable_in_symbol_list_check(), 
         "Variable already declared in procedure");
         current_procedure->add_symbol_entry(*it);
         }
         CHECK_INPUT((decl_list->variable_in_symbol_list_check(decl_name) == false), 
         "Variable is declared twice", get_line_number());
         decl_list->push_symbol(*it);
         }
         d_val__.symbol_table = decl_list;
         }
         }
        break;

        case 23:
#line 368 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         
         Symbol_Table * decl_list = d_vsp__[-1].symbol_table;
         CHECK_INVARIANT((d_vsp__[0].decl_entry_list != NULL), "The declaration statement cannot be null");
         CHECK_INVARIANT((decl_list != NULL), "The declaration statement list cannot be null");
         vector<Symbol_Table_Entry * > *decl_entry_list = d_vsp__[0].decl_entry_list;
         for(vector<Symbol_Table_Entry * >::iterator it = decl_entry_list->begin(); it != decl_entry_list->end(); ++it)
         {
         string decl_name = (*it) -> get_variable_name();
         CHECK_INPUT((program_object.variable_proc_name_check(decl_name) == false),
         "Procedure name cannot be same as the variable name", get_line_number());
         if(current_procedure != NULL)
         {
         CHECK_INPUT((current_procedure->get_proc_name() != decl_name),
         "Variable name cannot be same as procedure name", get_line_number());
         CHECK_INVARIANT(current_procedure->variable_in_symbol_list_check(), 
         "Variable already declared in procedure");
         current_procedure->add_symbol_entry(*it);
         }
         CHECK_INPUT((decl_list->variable_in_symbol_list_check(decl_name) == false), 
         "Variable is declared twice", get_line_number());
         decl_list->push_symbol(*it);
         }
         d_val__.symbol_table = decl_list;
         }
         }
        break;

        case 24:
#line 408 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].declaration_list != NULL), "Declaration cannot be null");
         vector<pair< Data_Type, string> > *declaration_list = d_vsp__[-1].declaration_list;
         vector<Symbol_Table_Entry * > *decl_entry_list = new vector<Symbol_Table_Entry *>();
         for(vector<pair< Data_Type, string> >::iterator it = declaration_list->begin(); it!=declaration_list->end(); ++it)
         {
         Data_Type type = it->first;
         string decl_name = it->second;
         Symbol_Table_Entry * decl_entry = new Symbol_Table_Entry(decl_name, type, get_line_number());
         decl_entry_list -> push_back(decl_entry);
         }
         d_val__.decl_entry_list = decl_entry_list;
         }
         }
        break;

        case 25:
#line 430 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].var_list!=NULL), "variable list cannot be null");
         vector<std:: string> *var_list = d_vsp__[0].var_list;
         Data_Type type = int_data_type;
         vector<pair< Data_Type, string> > *declaration_list = new vector< pair<Data_Type, string> >();
         for(vector<string>::iterator it=var_list->begin(); it!=var_list->end(); ++it){
         string name = *it;
         pair< Data_Type, string> *declaration = new pair< Data_Type, string>(type, name);
         declaration_list -> push_back(*declaration);
         }
         d_val__.declaration_list = declaration_list;
         }
         }
        break;

        case 26:
#line 447 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].var_list!=NULL), "variable list cannot be null");
         vector<std:: string> *var_list = d_vsp__[0].var_list;
         Data_Type type = double_data_type;
         vector<pair< Data_Type, string> > *declaration_list = new vector< pair<Data_Type, string> >();
         for(vector<string>::iterator it=var_list->begin(); it!=var_list->end(); ++it){
         string name = *it;
         pair< Data_Type, string> *declaration = new pair< Data_Type, string>(type, name);
         declaration_list -> push_back(*declaration);
         }
         d_val__.declaration_list = declaration_list;
         }
         }
        break;

        case 27:
#line 466 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].string_value!=NULL),"Name cannot be null");
         string name = *(d_vsp__[0].string_value);
         vector<std:: string> *var_list = new vector<std:: string>();
         var_list->push_back(name);
         d_val__.var_list = var_list;
         }
         }
        break;

        case 28:
#line 478 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].var_list!=NULL)&&(d_vsp__[0].string_value!=NULL)), "List cannot be null and terminal name cannot be null");
         vector<std:: string> *var_list = d_vsp__[-2].var_list;
         string name = *(d_vsp__[0].string_value);
         var_list->push_back(name);
         d_val__.var_list = (var_list);
         }
         }
        break;

        case 29:
#line 491 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         Sequence_Ast *assign_list = new Sequence_Ast(get_line_number());
         d_val__.sequence_Ast = assign_list;
         }
         }
        break;

        case 30:
#line 501 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         
         Sequence_Ast *assign_list = d_vsp__[-1].sequence_Ast;
         CHECK_INVARIANT((d_vsp__[0].ast!=NULL), "non terminal assignment_statement cannot be null");
         Ast *assgn_stmt = d_vsp__[0].ast;
         assign_list->ast_push_back(assgn_stmt);
         d_val__.sequence_Ast = assign_list;
         }
         }
        break;

        case 31:
#line 516 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast!=NULL), "matched statement cannot be null");
         Ast *matched_stmt = d_vsp__[0].ast;
         d_val__.ast = matched_stmt;
         }
         }
        break;

        case 32:
#line 526 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast!=NULL), "unmatched statement cannot be null");
         Ast *unmatched_stmt = d_vsp__[0].ast;
         d_val__.ast = unmatched_stmt;
         }
         }
        break;

        case 33:
#line 538 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Statement can not be null");
         Ast * asgn_stmt = d_vsp__[0].ast;
         d_val__.ast = asgn_stmt;
         }
         }
        break;

        case 34:
#line 548 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].ast!=NULL && d_vsp__[0].ast != NULL), "Boolean expression cannot be null");
         Ast * cond = d_vsp__[-2].ast;
         Ast * body = d_vsp__[0].ast;
         Iteration_Statement_Ast *while_ast = new Iteration_Statement_Ast(cond, body, get_line_number(), false);
         d_val__.ast = while_ast;
         }
         }
        break;

        case 35:
#line 560 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Statement can not be null");
         Ast * do_while_stmt = d_vsp__[0].ast;
         d_val__.ast = do_while_stmt;
         }
         }
        break;

        case 36:
#line 570 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-4].ast!=NULL && d_vsp__[-2].ast != NULL && d_vsp__[0].ast != NULL), "Boolean expression cannot be null");
         Ast * cond = d_vsp__[-4].ast;
         Ast * then_part = d_vsp__[-2].ast;
         Ast * else_part = d_vsp__[0].ast;
         Selection_Statement_Ast *matched_ast = new Selection_Statement_Ast(cond, then_part, else_part, get_line_number());
         d_val__.ast = matched_ast;
         }
         }
        break;

        case 37:
#line 583 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].sequence_Ast!=NULL), "statement list cannot be null");
         Ast *statement_list = d_vsp__[-1].sequence_Ast;
         d_val__.ast = statement_list;
         } 
         }
        break;

        case 38:
#line 595 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].ast!=NULL)&&(d_vsp__[0].ast!=NULL), "Boolean expression and statement cannot be null");
         Ast *cond = d_vsp__[-2].ast;
         Ast *then_part = d_vsp__[0].ast;
         Ast *else_part = new Sequence_Ast(get_line_number());
         Selection_Statement_Ast *if_ast = new Selection_Statement_Ast(cond, then_part, else_part, get_line_number());
         d_val__.ast = if_ast;
         }
         }
        break;

        case 39:
#line 608 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-4].ast!=NULL && d_vsp__[-2].ast != NULL && d_vsp__[0].ast != NULL), "Boolean expression cannot be null");
         Ast * cond = d_vsp__[-4].ast;
         Ast * then_part = d_vsp__[-2].ast;
         Ast * else_part = d_vsp__[0].ast;
         Selection_Statement_Ast *unmatched_ast = new Selection_Statement_Ast(cond, then_part, else_part, get_line_number());
         d_val__.ast = unmatched_ast;
         }
         }
        break;

        case 40:
#line 621 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].ast!=NULL && d_vsp__[0].ast != NULL), "Boolean expression cannot be null");
         Ast * cond = d_vsp__[-2].ast;
         Ast * body = d_vsp__[0].ast;
         Iteration_Statement_Ast *while_ast = new Iteration_Statement_Ast(cond, body, get_line_number(), false);
         d_val__.ast = while_ast;
         }
         }
        break;

        case 41:
#line 635 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].ast!=NULL && d_vsp__[-5].ast != NULL), "Boolean expression cannot be null");
         Ast *cond = d_vsp__[-2].ast;
         Ast * body = d_vsp__[-5].ast;
         
         Iteration_Statement_Ast *do_while_ast = new Iteration_Statement_Ast(cond, body, get_line_number(), true);;
         d_val__.ast = do_while_ast;
         }
         }
        break;

        case 42:
#line 650 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-3].ast!=NULL)&&(d_vsp__[-1].ast!=NULL)), "lhs/rhs cannot be null");
         Ast *variable = d_vsp__[-3].ast;
         Ast *arith_expression = d_vsp__[-1].ast;
         Ast *assgn_stmt = new Assignment_Ast(variable, arith_expression, get_line_number());
         d_val__.ast = assgn_stmt;
         }
         }
        break;

        case 43:
#line 664 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(d_vsp__[-2].ast!=NULL, "arith_expression cannot be null");
         Ast * p_ast = d_vsp__[-2].ast;
         Print_Ast * print_ast = new Print_Ast(p_ast, get_line_number());
         Data_Type dt = void_data_type;
         print_ast->set_data_type(dt);
         d_val__ = print_ast;
         }
         }
        break;

        case 44:
#line 677 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(d_vsp__[-2]!=NULL, "string cannot be null");
         string s = *d_vsp__[-2];
         Print_Ast *p_ast = new Print_Ast(s, get_line_number());
         Data_Type dt = void_data_type;
         p_ast->set_data_type(dt);
         d_val__ = p_ast;
         }
         }
        break;

        case 45:
#line 692 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         Return_Ast *ret_ast = new Return_Ast(NULL, get_line_number());
         Data_Type dt = void_data_type;
         ret_ast->set_data_type(dt);
         d_val__ = ret_ast;
         }
         }
        break;

        case 46:
#line 703 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(d_vsp__[-1].ast!=NULL, "return argument cannot be null ", get_line_number());
         Ast *ret = d_vsp__[-1].ast;
         Return_Ast * ret_ast = new Return_Ast(ret, get_line_number());
         ret_ast->set_data_type(ret->get_data_type());
         d_val__ = ret_ast;
         }
         }
        break;

        case 47:
#line 717 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-4].string_value)!=NULL, "Function name in function call cannot be null")
         string name = *(d_vsp__[-4].string_value);
         if(current_procedure->variable_in_symbol_list_check(name)){
         CHECK_INVARIANT(CONTROL_SHOULD_NOT_REACH, "Variable name and function name matches", get_line_number());
         }
         else{
         if(!program_object.variable_proc_name_check(name)){
         CHECK_INVARIANT(CONTROL_SHOULD_NOT_REACH, "Function has not been declared", get_line_number());
         }
         }
         list<Ast * > arg_list = d_vsp__[-2];
         Procedure *proc= program_object.get_procedure(name);
         list<Data_Type> type_list;
         list<Ast *>::iterator =it;
         for(it=arg_list.begin();it!=arg_list.end();it++)
         {
         type_list.push_back((*it)->get_data_type());
         }
         if(!proc->argument_type_check(type_list)){
         CHECK_INVARIANT(CONTROL_SHOULD_NOT_REACH, "Arguments do not match the function definition", get_line_number());
         }
         Func_Call_Ast *func_ast = new Func_Call_Ast(name, arg_list, get_line_number());
         func_ast->set_data_type(proc->get_return_type());
         d_val__ = func_ast;
         }
         }
        break;

        case 48:
#line 749 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         list<Ast *> arg_list;
         d_val__ = arg_list;
         }
         }
        break;

        case 49:
#line 758 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(d_vsp__[-2]!=NULL && d_vsp__[0]!=NULL, "parameter cannot be null", get_line_number());
         list<Ast *> arg_list = d_vsp__[-2];
         Ast *param = d_vsp__[0];
         arg_list.push_back(param);
         d_val__ = arg_list;
         }
         }
        break;

        case 50:
#line 772 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(d_vsp__[0].ast!=NULL, "arith_expression cannot be null", get_line_number());
         Ast * arith_ast = d_vsp__[0].ast;
         d_val__ = arith_ast;
         }
         }
        break;

        case 51:
#line 784 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Operands of arithmetic expression can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * plus = new Plus_Ast(lhs, rhs, get_line_number());
         d_val__.ast = plus;
         }
         }
        break;

        case 52:
#line 796 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Operands of arithmetic expression can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * minus = new Minus_Ast(lhs, rhs, get_line_number());
         d_val__.ast = minus;
         }
         }
        break;

        case 53:
#line 808 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Operands of arithmetic expression can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * mult = new Mult_Ast(lhs, rhs, get_line_number());
         d_val__.ast = mult;
         }
         }
        break;

        case 54:
#line 820 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Operands of arithmetic expression can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * divide = new Divide_Ast(lhs, rhs, get_line_number());
         d_val__.ast = divide;
         }
         }
        break;

        case 55:
#line 832 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast!=NULL), "Operand of unary minus cannot be null");
         Ast *operand = d_vsp__[0].ast;
         Ast *uminus_ast = new UMinus_Ast( operand, NULL, get_line_number());
         d_val__.ast = uminus_ast;
         }
         }
        break;

        case 56:
#line 843 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Expression in Paranthesis can not be null");
         Ast * expr = d_vsp__[-1].ast;
         d_val__.ast = expr;
         }
         }
        break;

        case 57:
#line 853 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Term in an expression can not be null");
         Ast * term = d_vsp__[0].ast;
         d_val__.ast = term;
         }
         }
        break;

        case 58:
#line 863 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-4].ast != NULL) && d_vsp__[-2].ast != NULL && d_vsp__[0].ast != NULL), "Operands of conditional operator ?: can not be null");
         Ast * condition = d_vsp__[-4].ast;
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Ast * cond_expr = new Conditional_Operator_Ast(condition, lhs, rhs, get_line_number());
         d_val__.ast = cond_expr;
         }
         }
        break;

        case 59:
#line 876 "parser.yy"
        {
         if(NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0]!=NULL), "Func call cannot be null", get_line_number());
         Ast *func_ast = d_vsp__[0];
         d_val__.ast = func_ast;
         }
         }
        break;

        case 60:
#line 889 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast!=NULL), "variable cannot be null");
         Ast *ast = d_vsp__[0].ast;
         d_val__.ast = ast;
         }
         }
        break;

        case 61:
#line 899 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast!=NULL), "constant cannot be null");
         Ast *ast = d_vsp__[0].ast;
         d_val__.ast = ast;
         }
         }
        break;

        case 62:
#line 911 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Operands of a boolean AND expression can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Boolean_Op bop = boolean_and;
         Ast * and_stmt = new Boolean_Expr_Ast(lhs, bop, rhs, get_line_number());
         d_val__.ast = and_stmt;
         }
         }
        break;

        case 63:
#line 924 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Operands of a boolean OR expression can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Boolean_Op bop = boolean_or;
         Ast * or_stmt = new Boolean_Expr_Ast(lhs, bop, rhs, get_line_number());
         d_val__.ast = or_stmt;
         }
         }
        break;

        case 64:
#line 937 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Operands of a boolean NOT expression can not be null");
         Ast * lhs = NULL;
         Ast * rhs = d_vsp__[0].ast;
         Boolean_Op bop = boolean_not;
         Ast * not_stmt = new Boolean_Expr_Ast(lhs, bop, rhs, get_line_number());
         d_val__.ast = not_stmt;
         }
         }
        break;

        case 65:
#line 950 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-1].ast != NULL), "Boolean expression in Paranthesis can not be null");
         Ast * expr = d_vsp__[-1].ast;
         d_val__.ast = expr;
         }
         }
        break;

        case 66:
#line 960 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].ast != NULL), "Boolean expression is not Valid");
         Ast * expr = d_vsp__[0].ast;
         d_val__.ast = expr;
         }
         }
        break;

        case 67:
#line 972 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Relational Expression operands can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Relational_Op rop = less_than;
         Ast * lt = new Relational_Expr_Ast(lhs, rop, rhs, get_line_number());
         d_val__.ast = lt;
         }
         }
        break;

        case 68:
#line 985 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Relational Expression operands can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Relational_Op rop = less_equalto;
         Ast * lte = new Relational_Expr_Ast(lhs, rop, rhs, get_line_number());
         d_val__.ast = lte;
         }
         }
        break;

        case 69:
#line 998 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Relational Expression operands can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Relational_Op rop = greater_than;
         Ast * gt = new Relational_Expr_Ast(lhs, rop, rhs, get_line_number());
         d_val__.ast = gt;
         }
         }
        break;

        case 70:
#line 1011 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Relational Expression operands can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Relational_Op rop = greater_equalto;
         Ast * gte = new Relational_Expr_Ast(lhs, rop, rhs, get_line_number());
         d_val__.ast = gte;
         }
         }
        break;

        case 71:
#line 1024 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Relational Expression operands can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Relational_Op rop = equalto;
         Ast * eq = new Relational_Expr_Ast(lhs, rop, rhs, get_line_number());
         d_val__.ast = eq;
         }
         }
        break;

        case 72:
#line 1037 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-2].ast != NULL) && (d_vsp__[0].ast != NULL)), "Relational Expression operands can not be null");
         Ast * lhs = d_vsp__[-2].ast;
         Ast * rhs = d_vsp__[0].ast;
         Relational_Op rop = not_equalto;
         Ast * neq = new Relational_Expr_Ast(lhs, rop, rhs, get_line_number());
         d_val__.ast = neq;
         }
         }
        break;

        case 73:
#line 1052 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table_Entry * var_table_entry;
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Variable name cannot be null");
         if (current_procedure->variable_in_symbol_list_check(*d_vsp__[0].string_value))
         var_table_entry = &(current_procedure->get_symbol_table_entry(*d_vsp__[0].string_value));
         else if (program_object.variable_in_symbol_list_check(*d_vsp__[0].string_value))
         var_table_entry = &(program_object.get_symbol_table_entry(*d_vsp__[0].string_value));
         else
         CHECK_INPUT_AND_ABORT(CONTROL_SHOULD_NOT_REACH, "Variable has not been declared", get_line_number());
         d_val__.ast = new Name_Ast(*d_vsp__[0].string_value, *var_table_entry, get_line_number());
         delete d_vsp__[0].string_value;
         }
         }
        break;

        case 74:
#line 1077 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((&(d_vsp__[0].integer_value)!=NULL), "Constant number cannot be null");
         int number = d_vsp__[0].integer_value;
         Data_Type type = int_data_type;
         Ast *number_ast = new Number_Ast<int>(number, type, get_line_number());
         d_val__.ast = number_ast;
         }
         }
        break;

        case 75:
#line 1089 "parser.yy"
        {
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((&(d_vsp__[0].double_value)!=NULL), "Constant number cannot be null");
         double number = d_vsp__[0].double_value;
         Data_Type type = double_data_type;
         Ast *number_ast = new Number_Ast<double>(number, type, get_line_number());
         d_val__.ast = number_ast;
         }
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



